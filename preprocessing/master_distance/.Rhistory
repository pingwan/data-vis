model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
#plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
#plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
#plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
#plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
#plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
#plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
#plot(res)
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
genUniVec <- function(p) {
return (runif(p, -1, 1));
}
getVecNorm <- function(x) {
return (sqrt(sum(x^2)));
}
createDataset <- function(p) {
ds <- c();
for(i in 1:1000) {
vec <- genUniVec(p);
ds <- cbind(ds, vec);
}
return (ds)
}
getYprediction <- function(ds, a) {
minV  <- getVecNorm(ds[,1]);
for(i in 2:1000) {
minV <- min(minV, getVecNorm(ds[,i]));
}
return(exp(-a * minV));
}
createPoints = function(rep){
mat <- c(1, 2, 4, 8, 16, 32);
res <- rep(mat, each=rep);
res <- cbind(res, res);
index <- 1;
for(i in 1:length(mat)) {
for(j in 1:rep) {
ds <- createDataset(mat[i]);
y <- getYprediction(ds, 3);
res[index,2] = y;
index = index + 1;
}
}
return (res);
}
mdf <- function(model, x){
return(model$coefficients[[1]] + model$coefficients[[2]] * x)
}
res <- createPoints(20);
plot(res, xlab="sample")
model <- lm(log(res[,2]) ~ res[,1])
logplot <- exp(predict(model,list=res[,1]))
lines(c(1:32), exp(mdf(model,c(1:32))))
View(res)
list()
ls
ls()
rm(ls())
rm(list=ls())
8+5
1:100
print("hello world!")
x  <- 1:250
y  <- c(1,2,3,4,5)
library()
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
require("ggplot2")
?ggplot2
?vignette
vignette()
update.packages()
?datasets
library(help=datasets)
data
data()
?datasets
library(help=datasets)
data(airmiles)
View(airmiles)
Head(airmiles)
?head
head(airmiles,10)
str(airmiles)
colors
colors()
wd()
getwd()
lswd()
printwd()
getwd()
setwd("/Users/Ping/Desktop/data-visualisation/preprocessing/master_distance")
temp = list.files(pattern="*.csv")
temp
myfiles = do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
View(myfiles)
summary(myfiles)
head(myfiles)
myfiles$Win.Lose = as.factor(myfiles$Win.Lose)
table(myfiles$Win.Lose)
winners = subset(myfiles, myfiles$Win.Lose = "win")
winners = subset(myfiles, myfiles$Win.Lose == "win")
winners = subset(myfiles, myfiles$Win.Lose == "Win")
losers = subset(myfiles, myfiles$Win.Lose == "Lose")
head(winners)
winners[order(tsync)]
winners[order(-tsync)]
winners = winners[order(-tsync)]
str(winners)
winners = winners[order(-"tsync")]
winners[with(winners, order(-tsync)), ]
winners = winners[with(winners, order(-tsync)), ]
head(winners)
winners = winners[with(winners, order(tsync)), ]
head(winners)
install.packages("data.table")
library(data.table)
myfiles = as.data.table(myfiles)
head(winners)
winners[,mean(DD),by=tsync]
winners[,mean(DD),by="tsync"]
temp = list.files(pattern="*.csv")
myfiles = do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
myfiles = as.data.table(myfiles)
myfiles$Win.Lose = as.factor(myfiles$Win.Lose)
winners = subset(myfiles, myfiles$Win.Lose == "Win")
losers = subset(myfiles, myfiles$Win.Lose == "Lose")
winners[,mean(DD),by="tsync"]
setwd("/Users/Ping/Desktop/data-visualisation/preprocessing/master_distance")
install.packages("data.table")
library(data.table)
temp = list.files(pattern="*.csv")
myfiles = do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
myfiles = as.data.table(myfiles)
myfiles$Win.Lose = as.factor(myfiles$Win.Lose)
winners = subset(myfiles, myfiles$Win.Lose == "Win")
losers = subset(myfiles, myfiles$Win.Lose == "Lose")
winners_aggregate = winners[,mean(DD),by="tsync"]
losers_aggregate = losers[,mean(DD),by="tsync"]
install.packages("data.table")
library(data.table)
temp = list.files(pattern="*.csv")
myfiles = do.call(rbind, lapply(temp, function(x) read.csv(x, stringsAsFactors = FALSE)))
myfiles = as.data.table(myfiles)
myfiles$Win.Lose = as.factor(myfiles$Win.Lose)
winners = subset(myfiles, myfiles$Win.Lose == "Win")
losers = subset(myfiles, myfiles$Win.Lose == "Lose")
winners_aggregate = winners[,mean(DD),by="tsync"]
losers_aggregate = losers[,mean(DD),by="tsync"]
losers_aggregate
winners_aggregate
table(winners$Win.Lose)
table(loosers$Win.Lose)
table(losers$Win.Lose)
aggregate = rbind(winners_aggregate, losers_aggregate)
aggregate
write.csv(aggregate, file = "aggregate.csv")
winners_aggregate$type = "win"
head(winners_aggregate)
losers_aggregate$type = "lose"
head(losers_aggregate)
aggregate = rbind(winners_aggregate, losers_aggregate)
str(aggregate)
names(aggregate) = c("tsync","DD","type")
write.csv(aggregate, file = "aggregate.csv")
